#PROXY="10.22.167.17";                                       # Using desktop squid
#PYPI_MIRROR="10.22.167.17";


#### Set these specific to your environment!
####

# IP/Hostname of pypi mirror, or leave blank to not use
export PYPI_MIRROR=${PYPI_MIRROR:-''}

# IP/Hostname:Port of HTTP/HTTPS Proxy, or leave blank to not use
export PROXY=${PROXY:-''}

export TRIPLEO_ROOT=${TRIPLEO_ROOT:-"$PWD/tripleo"}
export TE_DATAFILE=${TE_DATAFILE:-"$TRIPLEO_ROOT/testenv.json"}

# How much CPU/mem/disk available on nodes
export NODE_CPU=${NODE_CPU:-24}
export NODE_MEM=${NODE_MEM:-98304}
export NODE_DISK=${NODE_DISK:-1600}

export NeutronPublicInterface=eth2

# Scale for overcloud compute/control.
export OVERCLOUD_CONTROLSCALE=${OVERCLOUD_CONTROLSCALE:-"29"}
export OVERCLOUD_COMPUTESCALE=${OVERCLOUD_COMPUTESCALE:-"29"}

# Specific to your network
export FLOATING_START="10.22.157.225"
export FLOATING_END="10.22.157.254"
export FLOATING_CIDR="10.22.157.244/27"
##### end

if [[ -n "$PROXY" ]] ; then
  export http_proxy="http://$PROXY/"
  export https_proxy="https://$PROXY/"
  export no_proxy="${PYPI_MIRROR},localhost";
fi

if [[ -n "$PYPI_MIRROR" ]] ; then
  export PYPI_MIRROR_URL="http://${PYPI_MIRROR}/pypi/latest";   # point this at the pypi mirror.
  export DIB_NO_PYPI_PIP=1 
  export PYPI_MIRROR_URL_1=http://${PYPI_MIRROR}/pypi/latest/Ubuntu-13.10/
fi

export DIB_COMMON_ELEMENTS="stackuser pypi -u use-ephemeral mellanox"
export DEVTEST_PERF_COMMENT="$(hostname): clean re-run, using USEast pypi mirror."

# same arch as host machine, so the wheels in the mirror work
export NODE_ARCH=amd64
export NODE_DIST=${NODE_DIST:-"ubuntu"}
export DIB_RELEASE=trusty

# NOTE (adam_g): Limit cloud-init data sources to Ec2 to workaround
#		 trusty cloud-init bug #1316475.
#		 Relies on https://review.openstack.org/#/c/95598/
export DIB_CLOUD_INIT_DATASOURCES="Ec2"
export UNDERCLOUD_DIB_EXTRA_ARGS="rabbitmq-server cloud-init-datasources"
export OVERCLOUD_DIB_EXTRA_ARGS="rabbitmq-server cloud-init-datasources"

# NOTE (adam_g): Set a long timeout for stack creation
#		 Relies on https://review.openstack.org/#/c/95968/
export OVERCLOUD_STACK_TIMEOUT="120"

[[ -z "$NO_SOURCE_PREP" ]] && bin/prep_source_repos

# Clone our local git copies. Make devtest.sh prefer your local repositories. You'll still need to have stuff checked in to them!
for n in $TRIPLEO_ROOT/*;
do
  [ -d "$n" -a -d "$n/.git" ] || continue

  nn=$(basename "$n")      # work around older bash
  bn=${nn//[^A-Za-z0-9_]/_}

  DIB_REPOTYPE="DIB_REPOTYPE_${bn}";
  DIB_REPOLOCATION="DIB_REPOLOCATION_${bn}";
  DIB_REPOREF="DIB_REPOREF_${bn}";

  export "${DIB_REPOTYPE}"="git";
  export "${DIB_REPOLOCATION}"="${n}";

  unset branch;
  if branch=$(cd "${n}" && git symbolic-ref --short -q HEAD); 
  then
        export "${DIB_REPOREF}"="${branch}";
  else
        unset "${DIB_REPOREF}";
  fi

  printf "%-25s %-5s %-60s %s\n" "${bn}" "${!DIB_REPOTYPE}" "${!DIB_REPOLOCATION}" "${!DIB_REPOREF}";

  pushd "${n}" >/dev/null;
  if [[ "$(git rev-parse master)" != "$( git rev-parse HEAD)" ]]; 
  then
    IFS=$'\n';
    for f in $(git log master.. --oneline); do 
      printf '  \e[1;31m%-60s \e[1;34m%s\e[m\n' "${f}" "$(git show $(echo $f | cut -d" " -f1) | awk '/Change-Id/ {print "http://review.openstack.org/r/" $2}')"; 
    done
  fi
  popd >/dev/null;

done

source $TRIPLEO_ROOT/tripleo-incubator/scripts/devtest_variables.sh
